// Always O(nlog(n)) time | O(1) space
function heapSort(array) {
  buildMaxHeap(array);
	for (let endIndex = array.length - 1; endIndex > 0; endIndex--) {
		swap(0, endIndex, array);
		siftDown(0, endIndex - 1, array);
	}
	return array;
}

function buildMaxHeap(array) {
	const firstParentIndex = Math.floor((array.length - 2) / 2);
	for (let currentIndex = firstParentIndex; currentIndex >= 0; currentIndex--) {
		siftDown(currentIndex, array.length - 1, array);
	}
}

function siftDown(currentIndex, endIndex, heap) {
	let childOneIndex = currentIndex * 2 + 1;
	while (childOneIndex <= endIndex) {
		const childTwoIndex = currentIndex * 2 + 2 <= endIndex ? currentIndex * 2 + 2 : -1;
		let indexToSwap;
		if (childTwoIndex !== -1 && heap[childTwoIndex] > heap[childOneIndex]) {
			indexToSwap = childTwoIndex;
		} else {
			indexToSwap = childOneIndex;
		}
		if (heap[indexToSwap] > heap[currentIndex]) {
			swap(currentIndex, indexToSwap, heap);
			currentIndex = indexToSwap;
			childOneIndex = currentIndex * 2 + 1;
		} else {
			return;
		}
	}
}

function swap(i, j, array) {
	[array[i], array[j]] = [array[j], array[i]];
}